#!/bin/bash

# Compile all of the source files
echo -e "\033[4;35m> Compiling\033[0;0m\n"
rm tmp -r -f
mkdir tmp
mkdir tmp/o

find src -type f | while read fname; do
    echo -e "\e[1A\e[2K\033[4;36m> $fname\033[0;0m"
    output_name=$(echo "$fname" | perl -pe 's|/|-|g; s|\.(?=.+)|_|g')
    output_file=$"tmp/o/$output_name.o"
    if [[ $fname =~ .+\.c$ ]]; then     # Compile C files
        $HOME/opt/cross/bin/i686-elf-gcc -g -c $fname -o $output_file -ffreestanding -O2 -Wall -Wextra -fno-exceptions -Wno-unused-parameter -Wno-unused-function
    elif [[ $fname =~ .+\.s$ ]]; then   # Compile asm (.s) files
        nasm -felf32 $fname -o $output_file
    fi
done;
echo -e "\e[1A\e[2K\e[1A"

# Link object files
echo -e "\033[4;35m> Linking\033[0;0m"
rm bin -r -f
mkdir bin
$HOME/opt/cross/bin/i686-elf-gcc -g -T src/LINKER.ld -ffreestanding -O2 -nostdlib -lgcc tmp/o/*

# Verify multiboot 
grub-file --is-x86-multiboot bin/KaOS.bin
if [ $? == 0 ]; then
    echo -e "\033[0;32m> Multiboot Confirmed\033[0;0m"
else
    echo -e "\033[0;31m> Multiboot Failed\033[0;0m"
    exit 1
fi

# Extract symbols
echo -e "\033[4;35m> Generating symbols\033[0;0m"
objcopy --only-keep-debug bin/KaOS.bin bin/KaOS.sym
objcopy --strip-debug bin/KaOS.bin

# Make an .iso
echo -e "\033[4;35m> Creating .iso\033[0;0m"
mkdir -p tmp/iso/boot/grub
cp bin/KaOS.bin tmp/iso/boot/KaOS.bin
cp src/grub.cfg tmp/iso/boot/grub/grub.cfg
grub-mkrescue -o bin/KaOS.iso tmp/iso

echo -e "\033[1;32m> Done\033[0;0m"